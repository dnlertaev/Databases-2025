CREATE DATABASE advanced_lab;

CREATE TABLE IF NOT EXISTS employees (
    emp_id      INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name  TEXT NOT NULL,
    last_name   TEXT NOT NULL,
    department  TEXT,
    salary      INT,
    hire_date   DATE,
    status      TEXT NOT NULL DEFAULT 'Active'
);

CREATE TABLE departments (
    department_id   INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    department_name TEXT NOT NULL,
    budget          INT NOT NULL,
    manager_id      INT NULL REFERENCES employees(emp_id) ON DELETE SET NULL
);

CREATE TABLE projects (
    project_id    INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    project_name  TEXT NOT NULL,
    department_id INT NULL REFERENCES departments(department_id) ON DELETE SET NULL,
    start_date    DATE,
    end_date      DATE,
    budget        INT NOT NULL
);

INSERT INTO employees (emp_id, first_name, last_name, department)
VALUES
    (1001, 'Harry',    'Potter',   'Magic'),
    (1002, 'Hermione', 'Granger',  'Magic'),
    (1003, 'Ron',      'Weasley',  'Magic');

INSERT INTO employees (first_name, last_name, department, salary, status)
VALUES ('Salazar', 'Slytherin', 'Dark Arts', DEFAULT, DEFAULT);

INSERT INTO departments (department_id, department_name, budget, manager_id)
VALUES
    (1, 'Gryffindor', 200000, NULL),
    (2, 'Slytherin',  180000, NULL),
    (3, 'Ravenclaw',  150000, NULL);

INSERT INTO employees (first_name, last_name, department, salary, hire_date, status)
VALUES ('Albus', 'Dumbledore', 'Management', CAST(50000 * 1.1 AS INT), CURRENT_DATE, 'Active');

DROP TABLE IF EXISTS temp_employees;
CREATE TEMP TABLE temp_employees AS
SELECT *
FROM employees
WHERE 1 = 0;  -- создаём пустую таблицу с той же структурой

INSERT INTO temp_employees
SELECT *
FROM employees
WHERE department = 'Magic';

-- C7: +10% ко всем salary (только тем, у кого salary не NULL)
UPDATE employees
SET salary = CAST(salary * 1.10 AS INT)
WHERE salary IS NOT NULL;

-- C8: status = 'Senior' если salary > 60000 И hire_date < '2020-01-01'
UPDATE employees
SET status = 'Senior'
WHERE salary > 60000
  AND hire_date < DATE '2020-01-01';

-- C9: department по вилкам salary
UPDATE employees
SET department = CASE
    WHEN salary > 80000 THEN 'Management'
    WHEN salary BETWEEN 50000 AND 80000 THEN 'Senior'
    ELSE 'Junior'
END
WHERE salary IS NOT NULL;

-- C10: department = DEFAULT (т.е. NULL) где status = 'Inactive'
UPDATE employees
SET department = DEFAULT
WHERE status = 'Inactive';

-- C11: budget = 1.2 * avg(salary) по каждому департаменту
WITH avg_sal AS (
    SELECT
        e.department AS department_name,
        AVG(e.salary)::INT AS avg_salary
    FROM employees e
    WHERE e.salary IS NOT NULL
    GROUP BY e.department
)
UPDATE departments d
SET budget = (a.avg_salary * 1.20)::INT
FROM avg_sal a
WHERE d.department_name = a.department_name;

-- C12: для 'Sales' → salary * 1.15 и status = 'Promoted'
UPDATE employees
SET salary = CAST(salary * 1.15 AS INT),
    status = 'Promoted'
WHERE department = 'Sales';
-- WHERE department = 'Gryffindor';

-- D13: удалить всех с status = 'Terminated'
DELETE FROM employees
WHERE status = 'Terminated';

-- D14: salary < 40000 И hire_date > '2023-01-01' И department IS NULL
DELETE FROM employees
WHERE salary < 40000
  AND hire_date > DATE '2023-01-01'
  AND department IS NULL;

-- D15
DELETE FROM departments
WHERE department_id NOT IN (
    SELECT DISTINCT d.department_id
    FROM departments d
    JOIN employees e ON e.department = d.department_name
    WHERE e.department IS NOT NULL
);

-- D16: удалить проекты, у которых end_date < '2023-01-01', вернуть все данные
DELETE FROM projects
WHERE end_date < DATE '2023-01-01'
RETURNING *;

-- E17: сотрудник без зарплаты и без департамента
INSERT INTO employees (first_name, last_name, department, salary, hire_date, status)
VALUES ('Neville', 'Longbottom', NULL, NULL, CURRENT_DATE, 'Active');

-- чек
SELECT emp_id, first_name, last_name, department, salary
FROM employees
WHERE last_name = 'Longbottom';

-- E18: где department IS NULL → 'Unassigned'
UPDATE employees
SET department = 'Unassigned'
WHERE department IS NULL;

-- чек
SELECT COUNT(*) AS unassigned_cnt
FROM employees
WHERE department = 'Unassigned';

-- E19
DELETE FROM employees
WHERE salary IS NULL
   OR department IS NULL;  -- это уже ничего не найдёт, если E18 прошёл

-- чек
SELECT COUNT(*) AS null_left
FROM employees
WHERE salary IS NULL OR department IS NULL;

-- F20: добавить сотрудника и вернуть emp_id + полное имя
INSERT INTO employees (first_name, last_name, department, salary, hire_date, status)
VALUES ('Severus', 'Snape', 'Potions', 70000, CURRENT_DATE, 'Active')
RETURNING emp_id,
          first_name || ' ' || last_name AS full_name;

-- F21: поднять зарплату всем из IT (или Magic, если так у тебя)
-- вернём emp_id, старую и новую зарплату
UPDATE employees
SET salary = salary + 5000
WHERE department = 'Magic'
RETURNING emp_id,
          salary - 5000 AS old_salary,
          salary        AS new_salary;

-- F22: удалить всех, у кого hire_date < 2020-01-01
-- вернуть все удалённые строки
DELETE FROM employees
WHERE hire_date < DATE '2020-01-01'
RETURNING *;

-- G23: добавляем Драко Малфоя, только если его ещё нет
INSERT INTO employees (first_name, last_name, department, salary, hire_date, status)
SELECT 'Draco', 'Malfoy', 'Slytherin', 55000, CURRENT_DATE, 'Active'
WHERE NOT EXISTS (
    SELECT 1 FROM employees
    WHERE first_name = 'Draco' AND last_name = 'Malfoy'
);

-- G24: если бюджет > 100000 → salary +10%, иначе +5%
UPDATE employees e
SET salary = CASE
                WHEN d.budget > 100000 THEN CAST(salary * 1.10 AS INT)
                ELSE CAST(salary * 1.05 AS INT)
             END
FROM departments d
WHERE e.department = d.department_name
  AND e.salary IS NOT NULL;

-- G25.1: вставляем 5 Уизликов
INSERT INTO employees (first_name, last_name, department, salary, hire_date, status)
VALUES
    ('Fred',   'Weasley', 'Gryffindor', 40000, CURRENT_DATE, 'Active'),
    ('George', 'Weasley', 'Gryffindor', 40000, CURRENT_DATE, 'Active'),
    ('Ginny',  'Weasley', 'Gryffindor', 42000, CURRENT_DATE, 'Active'),
    ('Arthur', 'Weasley', 'Ministry',   60000, CURRENT_DATE, 'Active'),
    ('Molly',  'Weasley', 'Home',       0,      CURRENT_DATE, 'Active');

-- G25.2: поднять всем Weasley зарплату на 10%
UPDATE employees
SET salary = CAST(salary * 1.10 AS INT)
WHERE last_name = 'Weasley'
  AND salary IS NOT NULL;

-- G26.1: создать архивную таблицу
DROP TABLE IF EXISTS employee_archive;
CREATE TABLE employee_archive AS
SELECT * FROM employees WHERE 1=0;

-- G26.2: перенести Inactive сотрудников в архив
INSERT INTO employee_archive
SELECT * FROM employees
WHERE status = 'Inactive';

-- G26.3: удалить их из основной таблицы
DELETE FROM employees
WHERE status = 'Inactive';

-- G27: продлить проекты, если budget > 50000 и сотрудников > 3
UPDATE projects p
SET end_date = p.end_date + INTERVAL '30 days'
WHERE p.budget > 50000
  AND (
      SELECT COUNT(*)
      FROM employees e
      JOIN departments d ON e.department = d.department_name
      WHERE d.department_id = p.department_id
  ) > 3;

